// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMINISTRADOR
  EMPLEADO
}

enum RoomType {
  REUNION
  FORMACION
  AULA
  CONFERENCIA
}

enum ReservationStatus {
  CONFIRMADO
  CANCELADO
  PENDIENTE
}

model User {
  id                   String   @id @default(uuid())
  identificationNumber String   @unique
  email                String   @unique
  names                String
  lastNames            String
  password             String
  role                 UserRole
  isActive             Boolean  @default(true)

  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt

  reservations         Reservation[]  

  @@index([isActive])
}

model Room {
  id          String    @id @default(uuid())
  name        String
  capacity    Int
  location    String
  roomType    RoomType  
  isAvailable Boolean   @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  reservations Reservation[]   
  resources    RoomResource[]   

  @@index([isAvailable])
}

model RoomResource {
  id          String   @id @default(uuid())
  name        String
  category    String
  description String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  room        Room     @relation(fields: [roomId], references: [id])  

  roomId      String
}

model Reservation {
  id              String              @id @default(uuid())
  reservationDate DateTime
  startTime       DateTime
  endTime         DateTime
  status          ReservationStatus   @default(PENDIENTE)  

  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now()) @updatedAt

  user            User                @relation(fields: [userId], references: [id]) 
  room            Room                @relation(fields: [roomId], references: [id]) 

  userId          String
  roomId          String

  @@unique([roomId, startTime, endTime])
}

